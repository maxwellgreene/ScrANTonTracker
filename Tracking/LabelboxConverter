{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"LabelboxConverter","provenance":[],"collapsed_sections":["V4wsCA_v9y2u","zKe8hJnCCW90","cWY07GLu95mp","j5kjXgW39-00","t1wyr4Y0-Wvb","0bZIAuM_-l3a","9YcKL9uU-olx","oOOxR4Jx-6vm"],"authorship_tag":"ABX9TyNNpQ+gVsoS0s8kCFQnPmTq"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"z7yUUFcJBcwf"},"source":["# Imports"]},{"cell_type":"code","metadata":{"id":"AXpz5dy2pICS","executionInfo":{"status":"ok","timestamp":1604351287045,"user_tz":300,"elapsed":497,"user":{"displayName":"Maxwell Greene","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi67vXjUguK-QVLdYodr91lrVWwWHdra8T8rfiT6R8=s64","userId":"07679276130146156792"}}},"source":["import urllib.request\n","import json \n","import os\n","import PIL\n","from PIL import Image\n","import requests\n","#from io import BytesIO\n","import distutils\n","\n","import pycocotools\n","from pycocotools.coco import COCO\n","from pycocotools.cocoeval import COCOeval\n","from pycocotools import mask as maskUtils"],"execution_count":270,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WX4d_JH6UEGX"},"source":["# Install Labelbox API & initialize"]},{"cell_type":"code","metadata":{"id":"G7n6wb25ijPi","executionInfo":{"status":"ok","timestamp":1604351290074,"user_tz":300,"elapsed":3509,"user":{"displayName":"Maxwell Greene","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi67vXjUguK-QVLdYodr91lrVWwWHdra8T8rfiT6R8=s64","userId":"07679276130146156792"}},"outputId":"656b1bbe-3fd2-4ca5-ea20-49a7fe3ece78","colab":{"base_uri":"https://localhost:8080/"}},"source":["#%%shell\n","#pip install labelbox\n","#export LABELBOX_API_KEY=\"<eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJjand1cjgxM3VkM2Y4MDg2MGg3cTg3NmxqIiwib3JnYW5pemF0aW9uSWQiOiJjand1cjgxMnpja3NjMDgxMWhra3I3NXF4IiwiYXBpS2V5SWQiOiJja2d2NWJ1aWZhbnc0MDc3NTd0eXV2YXpnIiwiaWF0IjoxNjAzOTk1MjAxLCJleHAiOjIyMzUxNDcyMDF9.0QSF1B3Gqk4PWa-brF7x4acwQAE4hE_v2EpDjcdbchw>\""],"execution_count":271,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: labelbox in /usr/local/lib/python3.6/dist-packages (2.4.6)\n","Requirement already satisfied: ndjson==0.3.1 in /usr/local/lib/python3.6/dist-packages (from labelbox) (0.3.1)\n","Requirement already satisfied: backoff==1.10.0 in /usr/local/lib/python3.6/dist-packages (from labelbox) (1.10.0)\n","Requirement already satisfied: google-api-core>=1.22.1 in /usr/local/lib/python3.6/dist-packages (from labelbox) (1.23.0)\n","Requirement already satisfied: requests>=2.22.0 in /usr/local/lib/python3.6/dist-packages (from labelbox) (2.23.0)\n","Requirement already satisfied: six>=1.13.0 in /usr/local/lib/python3.6/dist-packages (from google-api-core>=1.22.1->labelbox) (1.15.0)\n","Requirement already satisfied: pytz in /usr/local/lib/python3.6/dist-packages (from google-api-core>=1.22.1->labelbox) (2018.9)\n","Requirement already satisfied: setuptools>=34.0.0 in /usr/local/lib/python3.6/dist-packages (from google-api-core>=1.22.1->labelbox) (50.3.2)\n","Requirement already satisfied: google-auth<2.0dev,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from google-api-core>=1.22.1->labelbox) (1.23.0)\n","Requirement already satisfied: protobuf>=3.12.0 in /usr/local/lib/python3.6/dist-packages (from google-api-core>=1.22.1->labelbox) (3.12.4)\n","Requirement already satisfied: googleapis-common-protos<2.0dev,>=1.6.0 in /usr/local/lib/python3.6/dist-packages (from google-api-core>=1.22.1->labelbox) (1.52.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.6/dist-packages (from requests>=2.22.0->labelbox) (2020.6.20)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.6/dist-packages (from requests>=2.22.0->labelbox) (3.0.4)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.6/dist-packages (from requests>=2.22.0->labelbox) (1.24.3)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.6/dist-packages (from requests>=2.22.0->labelbox) (2.10)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.6/dist-packages (from google-auth<2.0dev,>=1.21.1->google-api-core>=1.22.1->labelbox) (0.2.8)\n","Requirement already satisfied: cachetools<5.0,>=2.0.0 in /usr/local/lib/python3.6/dist-packages (from google-auth<2.0dev,>=1.21.1->google-api-core>=1.22.1->labelbox) (4.1.1)\n","Requirement already satisfied: rsa<5,>=3.1.4; python_version >= \"3.5\" in /usr/local/lib/python3.6/dist-packages (from google-auth<2.0dev,>=1.21.1->google-api-core>=1.22.1->labelbox) (4.6)\n","Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in /usr/local/lib/python3.6/dist-packages (from pyasn1-modules>=0.2.1->google-auth<2.0dev,>=1.21.1->google-api-core>=1.22.1->labelbox) (0.4.8)\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":[""]},"metadata":{"tags":[]},"execution_count":271}]},{"cell_type":"code","metadata":{"id":"m6SKEn8pWsTy","executionInfo":{"status":"ok","timestamp":1604351290076,"user_tz":300,"elapsed":3500,"user":{"displayName":"Maxwell Greene","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi67vXjUguK-QVLdYodr91lrVWwWHdra8T8rfiT6R8=s64","userId":"07679276130146156792"}},"outputId":"fdb53b86-5211-4008-b5b2-54447eba641e","colab":{"base_uri":"https://localhost:8080/"}},"source":["#import labelbox\n","#from labelbox import Client\n","#key = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiJjand1cjgxM3VkM2Y4MDg2MGg3cTg3NmxqIiwib3JnYW5pemF0aW9uSWQiOiJjand1cjgxMnpja3NjMDgxMWhra3I3NXF4IiwiYXBpS2V5SWQiOiJja2d2NWJ1aWZhbnc0MDc3NTd0eXV2YXpnIiwiaWF0IjoxNjAzOTk1MjAxLCJleHAiOjIyMzUxNDcyMDF9.0QSF1B3Gqk4PWa-brF7x4acwQAE4hE_v2EpDjcdbchw\"\n","#client = Client(key)"],"execution_count":272,"outputs":[{"output_type":"stream","text":["INFO:labelbox.client:Initializing Labelbox client at 'https://api.labelbox.com/graphql'\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"Izjx0zNgUYrS"},"source":["#Get Labelbox Data"]},{"cell_type":"code","metadata":{"id":"KKF1MFJeuthC","executionInfo":{"status":"ok","timestamp":1604352870530,"user_tz":300,"elapsed":236,"user":{"displayName":"Maxwell Greene","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi67vXjUguK-QVLdYodr91lrVWwWHdra8T8rfiT6R8=s64","userId":"07679276130146156792"}}},"source":["#url = project.export_labels(timeout_seconds=120)\n","url = 'https://storage.googleapis.com/labelbox-exports/cjwur812zcksc0811hkkr75qx/cjwusz2lse4lj08367rl45dc0/export-2020-11-01T21%3A57%3A05.410Z.json?GoogleAccessId=api-prod%40labelbox-193903.iam.gserviceaccount.com&Expires=1605477428&Signature=oY5Mq81crpYxYbUGs6KtRkHi0OiCowYnh8TINooQWH3ZadfpARiFBZitC9G%2BaY2iGYi9U%2BqMKT6%2B7M9vfTvaDxPEjW0xboCMqnC9FdsNwtkaT0TbLOAGRL2RUwqYkoIubJQdgjVznHlKjDRJfWIEnGlEQOz4n%2FgpDbWuFnqcUPZcO50e0IXboS%2F0mp%2FmilhQo5LQPqaIFW6TUxKY%2Fqd8NS%2BCsgClLNDGsbUMtDtzvB96N0DIU2SsCuQdAlYbL1g%2FytVamIincOmy%2FH3PlFYQ%2FkanJxjiRMXpuEcuLBgBHH60vcTFubsz81fD4wgqIKLB4gcc4vy6%2FBIn8EfPeFrhsA%3D%3D&response-content-disposition=attachment'"],"execution_count":294,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OCd_7pRc7QHr"},"source":["save as variable"]},{"cell_type":"code","metadata":{"id":"231ik4D7mQue","executionInfo":{"status":"ok","timestamp":1604351290682,"user_tz":300,"elapsed":4080,"user":{"displayName":"Maxwell Greene","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi67vXjUguK-QVLdYodr91lrVWwWHdra8T8rfiT6R8=s64","userId":"07679276130146156792"}}},"source":["with urllib.request.urlopen(url) as temp_url:\n","    data = json.loads(temp_url.read().decode())"],"execution_count":274,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"g60W5vK37Te3"},"source":["save variable as file"]},{"cell_type":"code","metadata":{"id":"B2WKbxeA7S9n","executionInfo":{"status":"ok","timestamp":1604351293915,"user_tz":300,"elapsed":7306,"user":{"displayName":"Maxwell Greene","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi67vXjUguK-QVLdYodr91lrVWwWHdra8T8rfiT6R8=s64","userId":"07679276130146156792"}}},"source":["with open('/content/data/original.json', 'w', encoding='utf-8') as f:\n","    json.dump(data, f, ensure_ascii=False, separators=(',',':'))"],"execution_count":275,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OwNZ1gYn7jXZ"},"source":["# Conversion Functions"]},{"cell_type":"markdown","metadata":{"id":"V4wsCA_v9y2u"},"source":["### imports"]},{"cell_type":"code","metadata":{"id":"J8Hdnc1x9yQw","executionInfo":{"status":"ok","timestamp":1604351293921,"user_tz":300,"elapsed":7304,"user":{"displayName":"Maxwell Greene","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi67vXjUguK-QVLdYodr91lrVWwWHdra8T8rfiT6R8=s64","userId":"07679276130146156792"}}},"source":["#main.py imports\n","import argparse\n","import json\n","import os\n","import logging\n","import traceback as tb\n","\n","#exporter imports\n","import datetime as dt\n","from typing import Any, Dict\n","from shapely import wkt\n","from shapely.geometry import Polygon\n","from exceptions import UnknownFormatError\n","\n","#downloader imports\n","from PIL import Image\n","import requests\n","import urllib.request\n","\n","logging.basicConfig(level=logging.INFO)\n","LOGGER = logging.getLogger(__name__)"],"execution_count":276,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"zKe8hJnCCW90"},"source":["### download_images"]},{"cell_type":"code","metadata":{"id":"LB4lwCvjCaon","executionInfo":{"status":"ok","timestamp":1604351322952,"user_tz":300,"elapsed":242,"user":{"displayName":"Maxwell Greene","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi67vXjUguK-QVLdYodr91lrVWwWHdra8T8rfiT6R8=s64","userId":"07679276130146156792"}}},"source":["def download_images(file_input,path_output,dim = None):\n","  IMAGE_PATH = path_output#('{}/images/'.format(path_output))\n","\n","  if not os.path.exists(IMAGE_PATH):\n","     print(\"Creating directory: \",IMAGE_PATH)\n","     os.mkdir(IMAGE_PATH)\n","\n","  if dim is None:\n","    resize = False\n","  else:\n","    width , height = dim\n","    resize = True\n","\n","  for i, item in enumerate(data):\n","    #Create path names\n","    orig_path = os.path.join(IMAGE_PATH,item['ID'] + \"_original.jpg\")\n","    resized_path = os.path.join(IMAGE_PATH,item['ID'] + \".jpg\")\n","\n","    #Download, if not already downloaded\n","    url = item['Labeled Data']\n","\n","    if os.path.exists(orig_path):\n","      #print(\"Item:\",i,\" - NOT Downloading image   id: \",item['ID'])\n","      pass\n","    else:\n","      #print(\"Item:\",i,\" - Downloading image  with id: \",item['ID'], \" to \",orig_path)\n","      urllib.request.urlretrieve(url,orig_path)\n","\n","    if resize:\n","      #Load file as img\n","      if os.path.exists(resized_path):\n","        #Get image from resized path\n","        img = Image.open(resized_path).convert('RGB')\n","        if not (img.width == width and img.height == height):\n","          #If not resized, resize original again and resave\n","          img = Image.open(orig_path).convert('RGB')\n","          #print(\"Item:\",i,\" - Resizing to\",width,\"x\",height,\"id: \",item['ID'])\n","          img_resize = img.resize((width, height), Image.ANTIALIAS)\n","          img_resize.save(resized_path)\n","        else:\n","          #If resized and proper size, do not resize\n","          #print(\"Item:\",i,\" - NOT resizing,  resized, id: \",item['ID'])\n","          pass\n","      else:\n","        #If no resize exists, load original to resize\n","        img = Image.open(orig_path).convert('RGB')\n","        if not (img.width == width and img.height == height):\n","          #IF original is not proper size, resize.\n","          #print(\"Item:\",i,\" - Resizing to\",width,\"x\",height,\"id: \",item['ID'])\n","          img_resize = img.resize((width, height), Image.ANTIALIAS)\n","          img_resize.save(resized_path)\n","        else:\n","          #print(\"Item:\",i,\" - NOT resizing, already right:\",width,\"x\",height,\"id: \",item['ID'])\n","          img.save(resized_path)"],"execution_count":278,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"cWY07GLu95mp"},"source":["### from_json"]},{"cell_type":"code","metadata":{"id":"Dhuc9y5W9-HZ","executionInfo":{"status":"ok","timestamp":1604351323231,"user_tz":300,"elapsed":502,"user":{"displayName":"Maxwell Greene","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi67vXjUguK-QVLdYodr91lrVWwWHdra8T8rfiT6R8=s64","userId":"07679276130146156792"}}},"source":["def from_json(labeled_data, coco_output, label_format='XY',size = None):\n","    \"Writes labelbox JSON export into MS COCO format.\"\n","    # read labelbox JSON output\n","    with open(labeled_data, 'r') as file_handle:\n","        label_data = json.loads(file_handle.read())\n","\n","    # setup COCO dataset container and info\n","    coco = make_coco_metadata(label_data[0]['Project Name'], label_data[0]['Created By'],)\n","\n","    for data in label_data:\n","        # Download and get image name\n","        try:\n","            #print(\"Adding label: \",size)\n","            add_label(coco, data['ID'], data['Labeled Data'], data['Label'], label_format,size = size)\n","        except requests.exceptions.MissingSchema as exc:\n","            LOGGER.warning(exc)\n","            continue\n","        except requests.exceptions.ConnectionError:\n","            LOGGER.warning('Failed to fetch image from %s, skipping', data['Labeled Data'])\n","            continue\n","\n","    with open(coco_output, 'w+') as file_handle:\n","        file_handle.write(json.dumps(coco))\n"],"execution_count":279,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"j5kjXgW39-00"},"source":["### make_metadata"]},{"cell_type":"code","metadata":{"id":"7cChzKy1-VzJ","executionInfo":{"status":"ok","timestamp":1604351323235,"user_tz":300,"elapsed":499,"user":{"displayName":"Maxwell Greene","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi67vXjUguK-QVLdYodr91lrVWwWHdra8T8rfiT6R8=s64","userId":"07679276130146156792"}}},"source":["def make_coco_metadata(project_name: str, created_by: str) -> Dict[str, Any]:\n","    \"\"\"Initializes COCO export data structure.\n","\n","    Args:\n","        project_name: name of the project\n","        created_by: email of the project creator\n","\n","    Returns:\n","        The COCO export represented as a dictionary.\n","    \"\"\"\n","    return {\n","        'info': {\n","            'year': dt.datetime.now(dt.timezone.utc).year,\n","            'version': None,\n","            'description': project_name,\n","            'contributor': created_by,\n","            'url': 'labelbox.com',\n","            'date_created': dt.datetime.now(dt.timezone.utc).isoformat()\n","        },\n","        'images': [],\n","        'annotations': [],\n","        'licenses': [],\n","        'categories': []\n","    }"],"execution_count":280,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"t1wyr4Y0-Wvb"},"source":["### add_label"]},{"cell_type":"code","metadata":{"id":"zNd8kiZ_-aGT","executionInfo":{"status":"ok","timestamp":1604351323236,"user_tz":300,"elapsed":493,"user":{"displayName":"Maxwell Greene","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi67vXjUguK-QVLdYodr91lrVWwWHdra8T8rfiT6R8=s64","userId":"07679276130146156792"}}},"source":["def add_label(\n","        coco: Dict[str, Any], label_id: str, image_url: str,\n","        labels: Dict[str, Any], label_format: str, size = None):\n","    \"\"\"Incrementally updates COCO export data structure with a new label.\n","\n","    Args:\n","        coco: The current COCO export, will be incrementally updated by this method.\n","        label_id: ID for the instance to write\n","        image_url: URL to download image file from\n","        labels: Labelbox formatted labels to use for generating annotation\n","        label_format: Format of the labeled data. Valid options are: \"WKT\" and\n","                      \"XY\", default is \"XY\".\n","\n","    Returns:\n","        The updated COCO export represented as a dictionary.\n","    \"\"\"\n","\n","    image = {\n","        \"id\": label_id,\n","        \"file_name\": label_id + \".jpg\",\n","        #\"license\": None,\n","        #\"flickr_url\": image_url,\n","        \"coco_url\": image_url,\n","        #\"date_captured\": None,\n","    }\n","\n","    response = requests.get(image_url, stream=True, timeout=10.0)\n","    response.raw.decode_content = True\n","    image_width , image_height = Image.open(response.raw).size\n","\n","    if size is None:\n","      scale = (1,1)\n","      image['width'], image['height'] = image_width , image_height\n","    else:\n","      scale = (size[0]/image_width,size[1]/image_height)\n","      image['width'], image['height'] = size\n","\n","    coco['images'].append(image)\n","\n","    # remove classification labels (Skip, etc...)\n","    if not callable(getattr(labels, 'keys', None)):\n","        return\n","\n","    # convert label to COCO Polygon format\n","    for category_name, label_data in labels.items():\n","        try:\n","            # check if label category exists in 'categories' field\n","            category_id = [c['id']\n","                           for c in coco['categories']\n","                           if c['supercategory'] == category_name][0]\n","        except IndexError:\n","            category_id = len(coco['categories']) + 1\n","            category = {\n","                'supercategory': category_name,\n","                'id': category_id,\n","                'name': category_name\n","            }\n","            coco['categories'].append(category)\n","\n","        polygons = _get_polygons(label_format, label_data, scale)\n","        _append_polygons_as_annotations(coco, image, category_id, polygons)"],"execution_count":281,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0bZIAuM_-l3a"},"source":["### get polygons"]},{"cell_type":"code","metadata":{"id":"1N60d_fT-k8Q","executionInfo":{"status":"ok","timestamp":1604351323236,"user_tz":300,"elapsed":483,"user":{"displayName":"Maxwell Greene","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi67vXjUguK-QVLdYodr91lrVWwWHdra8T8rfiT6R8=s64","userId":"07679276130146156792"}}},"source":["def _get_polygons(label_format, label_data,scale = (1,1)):\n","    \"Converts segmentation `label: String!` into polygons\"\n","    x_scale , y_scale = scale\n","    if label_format == 'WKT':\n","        if isinstance(label_data, list):  # V3\n","            polygons = map(lambda x: wkt.loads(x['geometry']), label_data)\n","        else:  # V2\n","            polygons = wkt.loads(label_data)\n","    elif label_format == 'XY':\n","        polygons = []\n","        for xy_list in label_data:\n","            if 'geometry' in xy_list:  # V3\n","                xy_list = xy_list['geometry']\n","\n","                # V2 and V3\n","                if not isinstance(xy_list, list):\n","                    LOGGER.warning('Could not get an point list to construct polygon, skipping')\n","                    continue\n","            else:  # V2, or non-list\n","                if not isinstance(xy_list, list) or not xy_list or 'x' not in xy_list[0]:\n","                    # skip non xy lists\n","                    LOGGER.warning('Could not get an point list to construct polygon, skipping')\n","                    continue\n","\n","            if len(xy_list) > 2:  # need at least 3 points to make a polygon\n","                polygons.append(Polygon(map(lambda p: (\n","                    #========== THIS IS WHERE POINT TRANFORMATION HAPPENS =========\n","                    p['x'] * x_scale, \n","                    p['y'] * y_scale\n","                    #========== THIS IS WHERE POINT TRANFORMATION HAPPENS =========\n","                    ), xy_list)))\n","    else:\n","        exc = UnknownFormatError(label_format=label_format)\n","        LOGGER.exception(exc.message)\n","        raise exc\n","\n","    return polygons"],"execution_count":282,"outputs":[]},{"cell_type":"code","metadata":{"id":"RPukldPlWJ8g","executionInfo":{"status":"ok","timestamp":1604351323236,"user_tz":300,"elapsed":470,"user":{"displayName":"Maxwell Greene","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi67vXjUguK-QVLdYodr91lrVWwWHdra8T8rfiT6R8=s64","userId":"07679276130146156792"}}},"source":["# with open(\"/content/original.json\", 'r') as file_handle:\n","#         input_antsDATA = json.loads(file_handle.read())\n","# labeldata = input_antsDATA[1]['Label']['Full Ant']\n","# polygons = []\n","# for xylist in labeldata:\n","#     if 'geometry' in xylist:  # V3\n","#         xylist = xylist['geometry']\n","#         print(xylist)\n","#         # V2 and V3\n","#         if not isinstance(xylist, list):\n","#             LOGGER.warning('Could not get an point list to construct polygon, skipping')\n","#             continue\n","#     else:  # V2, or non-list\n","#         if not isinstance(xylist, list) or not xy_list or 'x' not in xy_list[0]:\n","#             # skip non xy lists\n","#             LOGGER.warning('Could not get an point list to construct polygon, skipping')\n","#             continue\n","\n","#     if len(xylist) > 2:  # need at least 3 points to make a polygon\n","#         polygons.append(Polygon(map(lambda p: (p['x'], p['y']), xylist)))"],"execution_count":283,"outputs":[]},{"cell_type":"code","metadata":{"id":"nlW-9slHYunS","executionInfo":{"status":"ok","timestamp":1604351323237,"user_tz":300,"elapsed":464,"user":{"displayName":"Maxwell Greene","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi67vXjUguK-QVLdYodr91lrVWwWHdra8T8rfiT6R8=s64","userId":"07679276130146156792"}}},"source":["# pol1 = Polygon(map(lambda p : (p['x'], p['y']), [{'x': 100, 'y': 100}, \n","#                                           {'x': 100, 'y': 200},\n","#                                           {'x': 200, 'y': 200},\n","#                                           {'x': 200, 'y': 100}]))\n","# pol2 = Polygon(map(lambda p : (p['x']*2, p['y']*2), [{'x': 785, 'y': 157}, \n","#                                                      {'x': 767, 'y': 146}, \n","#                                                      {'x': 746, 'y': 144}, \n","#                                                      {'x': 723, 'y': 142}, \n","#                                                      {'x': 709, 'y': 151}, \n","#                                                      {'x': 700, 'y': 163}, \n","#                                                      {'x': 701, 'y': 171}, \n","#                                                      {'x': 718, 'y': 169}, \n","#                                                      {'x': 740, 'y': 166}, \n","#                                                      {'x': 752, 'y': 166}, \n","#                                                      {'x': 766, 'y': 163}, \n","#                                                      {'x': 775, 'y': 169}, \n","#                                                      {'x': 784, 'y': 175}, \n","#                                                      {'x': 794, 'y': 186}, \n","#                                                      {'x': 800, 'y': 186}, \n","#                                                      {'x': 800, 'y': 157}]))\n","# pol1.area"],"execution_count":284,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9YcKL9uU-olx"},"source":["### append_polygons_as_annotations"]},{"cell_type":"code","metadata":{"id":"4nO5pAFE7lyb","executionInfo":{"status":"ok","timestamp":1604351323237,"user_tz":300,"elapsed":457,"user":{"displayName":"Maxwell Greene","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi67vXjUguK-QVLdYodr91lrVWwWHdra8T8rfiT6R8=s64","userId":"07679276130146156792"}}},"source":["def _append_polygons_as_annotations(coco, image, category_id, polygons):\n","    \"Adds `polygons` as annotations in the `coco` export\"\n","    for polygon in polygons:\n","        segmentation = []\n","        for x_val, y_val in polygon.exterior.coords:\n","            segmentation.extend([x_val, y_val])\n","\n","        annotation = {\n","            \"id\": len(coco['annotations']) + 1,\n","            \"image_id\": image['id'],\n","            \"category_id\": category_id,\n","            \"segmentation\": [segmentation],\n","            \"area\": polygon.area,  # float\n","            \"bbox\": [polygon.bounds[0], polygon.bounds[1],\n","                     polygon.bounds[2] - polygon.bounds[0],\n","                     polygon.bounds[3] - polygon.bounds[1]],\n","            \"iscrowd\": 0\n","        }\n","\n","        coco['annotations'].append(annotation)"],"execution_count":285,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"oOOxR4Jx-6vm"},"source":["# Execute Download"]},{"cell_type":"code","metadata":{"id":"_xLu3KOdEc-W","executionInfo":{"status":"ok","timestamp":1604351323238,"user_tz":300,"elapsed":451,"user":{"displayName":"Maxwell Greene","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi67vXjUguK-QVLdYodr91lrVWwWHdra8T8rfiT6R8=s64","userId":"07679276130146156792"}}},"source":["json_input   = \"/content/original.json\"\n","json_output  = \"/content/data\"\n","\n","download , resize , width , height = True , True , 1024 , 1024\n","image_folder = \"/content/images/\""],"execution_count":286,"outputs":[]},{"cell_type":"code","metadata":{"id":"xEIE2-0tAqHF","executionInfo":{"status":"ok","timestamp":1604351342832,"user_tz":300,"elapsed":20038,"user":{"displayName":"Maxwell Greene","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi67vXjUguK-QVLdYodr91lrVWwWHdra8T8rfiT6R8=s64","userId":"07679276130146156792"}},"outputId":"e842f1e8-db5a-4166-8a43-b8d231c7bfad","colab":{"base_uri":"https://localhost:8080/"}},"source":["if download:\n","\n","  LOGGER.info('Downloading images')\n","  if resize:\n","    download_images(json_input,image_folder, dim = [width,height])\n","  else:\n","    download_images(json_input,image_folder)\n","\n","  LOGGER.info('Finished downloading images')\n","\n","else:\n","\n","  LOGGER.info('Not downloading images')"],"execution_count":287,"outputs":[{"output_type":"stream","text":["INFO:__main__:Downloading images\n","INFO:__main__:Finished downloading images\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"KKyQG3RuAqac"},"source":["# Execute Conversion"]},{"cell_type":"code","metadata":{"id":"a6VTAlJ__ONh"},"source":["try:\n","    artifact_original = '{}/output_original3.json'.format(json_output)\n","    artifact_resized = '{}/output_resized3.json'.format(json_output)\n","    os.makedirs(json_output, exist_ok=True)\n","\n","    LOGGER.info('Creating original coco export')\n","    from_json(json_input, artifact_original)\n","    LOGGER.info('Done saving original coco export')\n","\n","    LOGGER.info('Creating resized coco export')\n","    from_json(json_input, artifact_resized, size = [width,height])\n","    LOGGER.info('Done saving resized coco export')\n","\n","except Exception as e:\n","    tb.print_exc()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lzC9DKOh00V0"},"source":["# Explore JSON contents"]},{"cell_type":"code","metadata":{"id":"D-wNoJIiSsJD"},"source":["with open(\"/content/data/original.json\", 'r') as file_handle:\n","        input_antsDATA = json.loads(file_handle.read())\n","input_antsDATA[1]['Label']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"O7JDRL4ES9nN","executionInfo":{"status":"ok","timestamp":1604354561517,"user_tz":300,"elapsed":1356,"user":{"displayName":"Maxwell Greene","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi67vXjUguK-QVLdYodr91lrVWwWHdra8T8rfiT6R8=s64","userId":"07679276130146156792"}},"outputId":"dd13246e-2a42-45c7-e8bc-f9870c3d703e","colab":{"base_uri":"https://localhost:8080/"}},"source":["output_antsCOCO = COCO(\"/content/data/antsCOCO_resized.json\")\n","\n","output_antsCOCO.imgs['cjx0l3fnqlwyn0844d8vq4vww']['license'] = 5\n","output_antsCOCO.imgs['cjx0l3fnqlwyn0844d8vq4vww']"],"execution_count":296,"outputs":[{"output_type":"stream","text":["loading annotations into memory...\n","Done (t=1.12s)\n","creating index...\n","index created!\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["{'coco_url': 'https://storage.googleapis.com/labelbox-193903.appspot.com/cjwur812zcksc0811hkkr75qx%2Fd5bbe79b-3ab3-1bd1-89a8-f0fb56347789-_77703502_red-ant-green-leaf.jpg',\n"," 'file_name': 'cjx0l3fnqlwyn0844d8vq4vww.jpg',\n"," 'height': 1024,\n"," 'id': 'cjx0l3fnqlwyn0844d8vq4vww',\n"," 'license': 5,\n"," 'width': 1024}"]},"metadata":{"tags":[]},"execution_count":296}]},{"cell_type":"markdown","metadata":{"id":"x3sgzKMnVNnU"},"source":["# Transfer files to Google Drive"]},{"cell_type":"code","metadata":{"id":"sSuGIdn3MZs0","executionInfo":{"status":"ok","timestamp":1604355314315,"user_tz":300,"elapsed":358934,"user":{"displayName":"Maxwell Greene","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gi67vXjUguK-QVLdYodr91lrVWwWHdra8T8rfiT6R8=s64","userId":"07679276130146156792"}},"outputId":"25942993-1efc-48f2-f5d6-d15fdab07063","colab":{"base_uri":"https://localhost:8080/"}},"source":["from distutils.dir_util import copy_tree\n","from google.colab import drive\n","\n","# REALLY COPY?\n","if True:\n","  drive.mount('/content/drive')\n","\n","  JSON_PATH = \"/content/data\"\n","  IMG_PATH  = \"/content/images\"\n","  DATA_DEST = \"/content/drive/My Drive/Tracker/data/ant\"\n","  print(\"Copying jsons from  \",JSON_PATH,\" to \",DATA_DEST)\n","  copy_tree(JSON_PATH, DATA_DEST)\n","  copy_tree(IMG_PATH,  DATA_DEST)\n","  print(\"Copying images from \",IMG_PATH,\" to \",DATA_DEST)\n","  drive.flush_and_unmount()"],"execution_count":297,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n","Copying jsons from   /content/data  to  /content/drive/My Drive/Tracker/data/ant\n","Copying images from  /content/images  to  /content/drive/My Drive/Tracker/data/ant\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"wvvua2jfAdfj"},"source":[""],"execution_count":null,"outputs":[]}]}